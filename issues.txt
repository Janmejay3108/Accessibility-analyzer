ðŸ“‹ Complete List of Vercel Deployment Issues
ðŸ”´ 1. Serverless Environment Incompatibility
Issue: Playwright browser automation cannot run in Vercel's serverless functions
Error: Error: browserType.launch: Executable doesn't exist at /var/task/node_modules/playwright/...
Root Cause: Vercel serverless functions don't support full browser automation
Impact: Core functionality (real accessibility scanning) completely broken
ðŸ”´ 2. CORS Policy Violations
Issue: Frontend blocked from accessing backend API due to CORS policy
Error: Access to XMLHttpRequest at 'https://...' from origin 'https://...' has been blocked by CORS policy
Root Cause: Mismatched domain origins between frontend and backend deployments
Impact: Frontend cannot communicate with backend at all
ðŸ”´ 3. API Endpoint 404 Errors
Issue: Backend API routes returning 404 NOT FOUND
Error: POST https://...vercel.app/api/analysis 404 (Not Found)
Root Cause: Express.js routing structure incompatible with Vercel's serverless function architecture
Impact: All API calls fail, no backend functionality accessible
ðŸ”´ 4. Environment Variable Configuration Issues
Issue: Frontend pointing to wrong backend URLs across deployments
Error: Network requests to outdated/incorrect backend URLs
Root Cause: Manual URL updates required for each new deployment
Impact: Frontend and backend not synchronized, constant deployment mismatches
ðŸ”´ 5. Firebase Service Account Authentication
Issue: Firebase Admin SDK failing to initialize in serverless environment
Error: Firebase configuration not found. Please set environment variables or service account key path
Root Cause: Service account key file not properly configured for Vercel deployment
Impact: Database operations and authentication completely broken
ðŸ”´ 6. Dependency Management Problems
Issue: Large dependencies (Playwright, browser binaries) causing deployment failures
Error: Deployment timeouts and size limit exceeded
Root Cause: Playwright requires ~200MB of browser binaries incompatible with serverless
Impact: Deployment process fails or times out
ðŸ”´ 7. Express.js Server Structure Incompatibility
Issue: Traditional Express server setup doesn't work with Vercel's function-based architecture
Error: Routes not properly mapped to serverless functions
Root Cause: Vercel expects individual function files, not a monolithic Express server
Impact: Complex routing and middleware not functioning
ðŸ”´ 8. Data Format Inconsistencies
Issue: Serverless scanner returns different data format than original scanner
Error: Cannot read properties of undefined (reading 'totalViolations')
Root Cause: Created serverless-compatible scanner with different output structure
Impact: Frontend cannot display results, analysis appears to complete but shows no data
ðŸ”´ 9. Real-time Processing Limitations
Issue: Serverless functions have execution time limits (10 seconds on Vercel)
Error: Function timeouts during long-running accessibility scans
Root Cause: Complex website analysis can take 30+ seconds
Impact: Analysis fails for larger/complex websites
ðŸ”´ 10. Static Asset and Build Configuration
Issue: Frontend build configuration not optimized for Vercel
Error: Build failures and incorrect asset paths
Root Cause: React build settings not properly configured for Vercel's CDN
Impact: Frontend deployment issues and broken static assets
ðŸ”´ 11. Database Connection Persistence
Issue: Firebase connections not properly managed in serverless environment
Error: Connection timeouts and authentication failures
Root Cause: Serverless functions don't maintain persistent connections
Impact: Data persistence unreliable, user sessions not maintained
ðŸ”´ 12. Debugging and Logging Difficulties
Issue: Limited visibility into serverless function execution
Error: Minimal error logs and debugging information
Root Cause: Vercel's serverless environment provides limited logging
Impact: Difficult to diagnose and fix issues in production
ðŸŽ¯ Summary of Core Problems:
Architectural Mismatch:
Traditional full-stack application vs. serverless function architecture
Browser automation requirements vs. serverless limitations
Persistent connections vs. stateless functions
Deployment Complexity:
Multiple moving parts (frontend, backend, database, authentication)
Manual URL synchronization between deployments
Environment-specific configuration management
Functionality Compromises:
Had to create mock responses instead of real analysis
Lost core value proposition (real accessibility scanning)
Reduced to basic CRUD operations without the main feature
Development vs. Production Gap:
Everything works perfectly in localhost
Complete failure in production environment
No clear migration path from development to deployment
ðŸ’¡ Lessons Learned:
Vercel is optimized for JAMstack/static sites, not complex full-stack applications with browser automation
Serverless has fundamental limitations for certain types of applications
Real functionality > Cloud deployment when core features are compromised
Localhost development remains the most reliable environment for complex applications
Platform choice matters - need to match platform capabilities with application requirements
The localhost setup provides 100% functionality while Vercel deployment resulted in 0% core functionality despite multiple attempts and workarounds.